# Minimal Base Image for Coral Machine Development
# ~3-5GB image that mounts pre-built dependencies from volume
# Uses widely-cached CUDA runtime image for fast RunPod cold starts

FROM nvidia/cuda:12.5.0-runtime-ubuntu22.04

# Configurable user settings (can override at build time)
ARG USERNAME=coral-dev
ARG USER_UID=1000
ARG USER_GID=1000

ENV DEBIAN_FRONTEND=noninteractive
SHELL ["/bin/bash", "-lc"]

# Essential packages only - compilers and heavy deps in volume
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Core system
    sudo openssh-server curl wget ca-certificates \
    # Build essentials (for runtime linking, not compilation)
    build-essential cmake ninja-build ccache \
    # Git for source management
    git git-lfs \
    # Minimal dev tools
    vim-tiny nano htop ncdu tree jq \
    # Shell and terminal
    zsh tmux rsync unzip \
    # Networking tools
    netcat-openbsd iputils-ping net-tools \
    # Debugging
    gdb valgrind \
    # Graphics runtime libs for ParaView/Polyscope
    libegl1 libgl1 libopengl0 \
    libglfw3 libx11-6 libxrender1 libxcursor1 xvfb \
    # Process management
    tini \
 && apt-get autoremove -y \
 && rm -rf /var/lib/apt/lists/*

# Non-root user for dev work
RUN groupadd -g ${USER_GID} ${USERNAME} \
 && useradd -m -u ${USER_UID} -g ${USER_GID} -s /bin/zsh ${USERNAME} \
 && usermod -aG sudo ${USERNAME} \
 && echo "${USERNAME} ALL=(ALL) NOPASSWD:ALL" >/etc/sudoers.d/${USERNAME}

# SSH daemon configuration
RUN mkdir -p /var/run/sshd \
 && sed -i 's/^#\?PasswordAuthentication .*/PasswordAuthentication no/' /etc/ssh/sshd_config \
 && sed -i 's/^#\?PermitRootLogin .*/PermitRootLogin no/' /etc/ssh/sshd_config \
 && sed -i 's/^#\?PubkeyAuthentication .*/PubkeyAuthentication yes/' /etc/ssh/sshd_config \
 && sed -i 's@^#\?AuthorizedKeysFile .*@AuthorizedKeysFile .ssh/authorized_keys@' /etc/ssh/sshd_config \
 && sed -i 's/^#\?ChallengeResponseAuthentication .*/ChallengeResponseAuthentication no/' /etc/ssh/sshd_config \
 && sed -i 's/^#\?UsePAM .*/UsePAM yes/' /etc/ssh/sshd_config \
 && echo "PermitUserEnvironment yes" >> /etc/ssh/sshd_config

# Create mount points for volume
RUN mkdir -p /workspace /workspace/deps /workspace/source /workspace/build /workspace/vtk /workspace/.ccache \
 && chown -R ${USERNAME}:${USERNAME} /workspace

# Environment - will be fully configured by startup.sh from volume
# Basic defaults for container functionality
ENV CMAKE_PREFIX_PATH="/workspace/deps"
ENV CCACHE_DIR="/workspace/.ccache"
ENV CCACHE_MAXSIZE="10G"
ENV NVIDIA_VISIBLE_DEVICES="all"
ENV NVIDIA_DRIVER_CAPABILITIES="compute,utility,graphics"

# Setup /etc/environment for SSH sessions (will be updated by startup.sh)
RUN echo 'PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"' > /etc/environment && \
    echo 'LD_LIBRARY_PATH=""' >> /etc/environment && \
    echo 'CMAKE_PREFIX_PATH="/workspace/deps"' >> /etc/environment && \
    echo 'CCACHE_DIR="/workspace/.ccache"' >> /etc/environment && \
    echo 'CCACHE_MAXSIZE="10G"' >> /etc/environment

# Setup dev user
USER ${USERNAME}
RUN mkdir -p ~/.ssh && chmod 700 ~/.ssh && \
    touch ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys && \
    # zsh configuration
    echo 'export PS1="%n@%m %~ %# "' >> ~/.zshrc && \
    echo 'alias ll="ls -la"' >> ~/.zshrc && \
    echo 'alias gs="git status"' >> ~/.zshrc && \
    # Source environment if exists
    echo '[ -f /workspace/deps/env.sh ] && source /workspace/deps/env.sh' >> ~/.zshrc && \
    # bash configuration (fallback)
    echo 'export PS1="\u@\h:\w\$ "' >> ~/.bashrc && \
    echo 'alias ll="ls -la"' >> ~/.bashrc && \
    echo 'alias gs="git status"' >> ~/.bashrc && \
    echo '[ -f /workspace/deps/env.sh ] && source /workspace/deps/env.sh' >> ~/.bashrc

USER root

# Copy SSH keys if provided (using ARG to get username in COPY)
COPY --chown=${USER_UID}:${USER_GID} authorized_keys* /tmp/
RUN if [ -f /tmp/authorized_keys ]; then \
        cp /tmp/authorized_keys /home/${USERNAME}/.ssh/authorized_keys && \
        chmod 600 /home/${USERNAME}/.ssh/authorized_keys && \
        chown ${USERNAME}:${USERNAME} /home/${USERNAME}/.ssh/authorized_keys; \
    fi && \
    rm -f /tmp/authorized_keys*

# Copy startup script
COPY volume-based/scripts/startup.sh /usr/local/bin/startup.sh
RUN chmod +x /usr/local/bin/startup.sh

WORKDIR /workspace

# Ports: SSH & ParaView
EXPOSE 22 11111

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=15s --retries=10 \
  CMD nc -z localhost 22 || exit 1

# Switch back to dev user
USER ${USERNAME}

# Use tini as PID 1
ENTRYPOINT ["/usr/bin/tini", "--"]
CMD ["sudo", "-E", "/usr/local/bin/startup.sh"]
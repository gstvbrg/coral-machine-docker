# Runtime image for Coral Machine Development
# Minimal image that uses pre-built dependencies from volume
# CUDA is provided by the mounted NVIDIA HPC SDK - no CUDA base image needed!

FROM ubuntu:22.04

# Running as root for RunPod deployment simplicity

ENV DEBIAN_FRONTEND=noninteractive
SHELL ["/bin/bash", "-lc"]

# Runtime dependencies and essential build tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Core system
    openssh-server \
    ca-certificates \
    # Essential tools for downloading/extracting
    curl \
    wget \
    unzip \
    # Essential build tools
    binutils \
    build-essential \
    cmake \
    ninja-build \
    ccache \
    # Git for source management  
    git \
    git-lfs \
    # Debugging tools for C++ development
    gdb \
    valgrind \
    # Minimal dev tools
    vim-tiny \
    nano \
    htop \
    tree \
    # Shell
    zsh \
    tmux \
    # File operations
    rsync \
    # Graphics runtime libs (for ParaView/visualization)
    libegl1 \
    libgl1 \
    libopengl0 \
    libglfw3 \
    libx11-6 \
    libxrender1 \
    libxcursor1 \
    xvfb \
    # Process management
    tini \
    # Networking tools
    netcat-openbsd \
    iputils-ping \
    net-tools \
    # Networking utilities
    iproute2 \
    dnsutils \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Tailscale (concise official installer)
RUN curl -fsSL https://tailscale.com/install.sh | sh \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Configure SSH daemon
RUN mkdir -p /var/run/sshd \
    && sed -i 's/^#\?PasswordAuthentication .*/PasswordAuthentication no/' /etc/ssh/sshd_config \
    && sed -i 's/^#\?PermitRootLogin .*/PermitRootLogin yes/' /etc/ssh/sshd_config \
    && sed -i 's/^#\?PubkeyAuthentication .*/PubkeyAuthentication yes/' /etc/ssh/sshd_config \
    && sed -i 's/^#\?ChallengeResponseAuthentication .*/ChallengeResponseAuthentication no/' /etc/ssh/sshd_config \
    && echo "PermitUserEnvironment yes" >> /etc/ssh/sshd_config

# Create mount points with organized output structure
RUN mkdir -p /workspace/deps /workspace/source /workspace/build /workspace/.ccache \
    /workspace/output/vtk /workspace/output/data /workspace/output/images \
    /workspace/output/checkpoints /workspace/output/logs

# Environment defaults
ENV CMAKE_PREFIX_PATH="/workspace/deps"
ENV CCACHE_DIR="/workspace/.ccache"
ENV NVIDIA_VISIBLE_DEVICES="all"
ENV NVIDIA_DRIVER_CAPABILITIES="compute,utility,graphics"
# Set hostname for prompt
ENV HOSTNAME="coral~machine"
# Control which startup script to use (set to "runpod" for RunPod deployment)
ENV STARTUP_MODE="default"
 # Ensure Tini reaps zombies even if not PID 1 (RunPod may wrap entrypoint)
ENV TINI_SUBREAPER=1

# Configure root shell environment (since we'll run as root in RunPod)
RUN echo '[ -f /workspace/deps/env.sh ] && source /workspace/deps/env.sh' >> /root/.bashrc \
    && echo '[ -f /workspace/deps/env.sh ] && source /workspace/deps/env.sh' >> /root/.zshrc \
    && echo 'export PS1="\[\033[01;31m\]\u@coral~machine\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ "' >> /root/.bashrc \
    && echo 'export PS1="%F{red}%n@coral~machine%f:%F{blue}%~%f %# "' >> /root/.zshrc \
    && echo 'export HOSTNAME="coral~machine"' >> /root/.bashrc \
    && echo 'export HOSTNAME="coral~machine"' >> /root/.zshrc \
    && echo 'alias ll="ls -la"' >> /root/.bashrc \
    && echo 'alias ll="ls -la"' >> /root/.zshrc \
    && echo 'alias gs="git status"' >> /root/.bashrc \
    && echo 'alias gs="git status"' >> /root/.zshrc \
    && echo '[ -f /etc/motd ] && cat /etc/motd' >> /root/.bashrc \
    && echo '[ -f /etc/motd ] && cat /etc/motd' >> /root/.zshrc

# Create MOTD (Message of the Day) for terminal sessions
RUN cat > /etc/motd << 'EOF'
Coral Machine Development Environment
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Quick Commands:
  coral-help  - Show all available commands
  paraview    - Start ParaView server
  check-env   - Verify environment setup
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
O RADIANT MUSES ~ MAKE ME YOUR INSTRUMENT
EOF

# Setup root SSH directory for potential key-based access
RUN mkdir -p /root/.ssh && chmod 700 /root/.ssh \
    && touch /root/.ssh/authorized_keys && chmod 600 /root/.ssh/authorized_keys

# Copy startup scripts (both regular and RunPod version)
COPY docker/startup.sh /usr/local/bin/startup.sh
COPY docker/startup-runpod.sh /usr/local/bin/startup-runpod.sh
# Fix line endings (in case of Windows development) and make executable
RUN sed -i 's/\r$//' /usr/local/bin/startup.sh /usr/local/bin/startup-runpod.sh \
    && chmod +x /usr/local/bin/startup.sh /usr/local/bin/startup-runpod.sh

# Copy SSH keys if provided (to root's .ssh)
COPY authorized_keys* /tmp/
RUN if [ -f /tmp/authorized_keys ]; then \
        cp /tmp/authorized_keys /root/.ssh/authorized_keys && \
        chmod 600 /root/.ssh/authorized_keys; \
    fi && \
    rm -f /tmp/authorized_keys*

WORKDIR /workspace

# Ports
EXPOSE 22 11111

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=15s \
    CMD nc -z localhost 22 || exit 1

# Create startup dispatcher script that selects the right startup based on STARTUP_MODE
RUN printf '#!/bin/bash\n\
if [ "$STARTUP_MODE" = "runpod" ]; then\n\
    exec /usr/local/bin/startup-runpod.sh\n\
else\n\
    exec /usr/local/bin/startup.sh\n\
fi\n' > /usr/local/bin/startup-dispatcher.sh && \
    chmod +x /usr/local/bin/startup-dispatcher.sh

# Stay as root for RunPod deployment (aligns with SSH access)
USER root

# Use tini for proper signal handling (subreaper to handle non-PID1 cases)
ENTRYPOINT ["/usr/bin/tini", "-s", "--"]
CMD ["/usr/local/bin/startup-dispatcher.sh"]